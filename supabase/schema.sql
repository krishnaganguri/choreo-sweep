-- Create families table
create table public.families (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  created_by uuid references auth.users not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create family members table with modified user_id to handle both UUID and email
create table public.family_members (
  id uuid default uuid_generate_v4() primary key,
  family_id uuid references public.families not null,
  user_id text not null, -- Can be either UUID or email
  role text not null check (role in ('admin', 'member')),
  display_name text not null,
  joined_at timestamp with time zone default timezone('utc'::text, now()) not null,
  is_verified boolean default false,
  unique(family_id, user_id)
);

-- Function to handle user verification
create or replace function public.handle_user_verification()
returns trigger as $$
begin
  -- Check if there are any pending invitations for this user's email
  update public.family_members
  set 
    user_id = new.id::text,
    is_verified = true
  where 
    user_id = new.email::text
    and not is_verified;
  
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to handle user verification when a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row
  execute function public.handle_user_verification();

-- Update chores table
create table public.chores (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  due_date timestamp with time zone,
  completed boolean default false not null,
  recurring boolean default false not null,
  recurring_interval text,
  user_id uuid references auth.users not null,
  family_id uuid references public.families,
  assigned_to uuid references auth.users,
  is_personal boolean default true not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Update grocery items table
create table public.grocery_items (
  id bigint generated by default as identity primary key,
  title text not null,
  quantity integer not null default 1,
  unit text,
  category text,
  completed boolean default false not null,
  user_id uuid references auth.users not null,
  family_id uuid references public.families,
  added_by uuid references auth.users not null,
  notes text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Update expenses table
create table public.expenses (
  id bigint generated by default as identity primary key,
  title text not null,
  amount numeric(10,2) not null,
  category text not null,
  date timestamp with time zone not null,
  user_id uuid references auth.users not null,
  family_id uuid references public.families,
  is_personal boolean default true not null,
  split_type text check (split_type in ('equal', 'custom')),
  split_with jsonb,
  notes text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Update reminders table
create table public.reminders (
  id bigint generated by default as identity primary key,
  title text not null,
  date text not null,
  time text not null,
  completed boolean default false not null,
  priority text check (priority in ('low', 'medium', 'high')) not null,
  user_id uuid references auth.users not null,
  family_id uuid references public.families,
  is_personal boolean default true not null,
  notify_family boolean default false not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Row Level Security Policies

-- Families
alter table public.families enable row level security;

create policy "Users can view their families"
  on public.families for select
  using (
    exists (
      select 1 from public.family_members
      where family_id = id
      and (
        user_id = auth.uid()::text
        or user_id = (
          select email from auth.users
          where id = auth.uid()
        )
      )
    )
  );

create policy "Users can create families"
  on public.families for insert
  with check (auth.uid() = created_by);

create policy "Family admins can update family details"
  on public.families for update
  using (
    exists (
      select 1 from public.family_members
      where family_id = id
      and user_id = auth.uid()::text
      and role = 'admin'
      and is_verified = true
    )
  );

-- Family Members
alter table public.family_members enable row level security;

-- Policy for viewing family members
create policy "View family members"
  on public.family_members for select
  to authenticated
  using (
    (user_id = (select auth.uid()::text) and is_verified = true)
    or user_id = (
      select email from auth.users
      where id = auth.uid()
    )
    or exists (
      select 1 from public.families f
      where f.id = family_id
      and f.created_by = auth.uid()
    )
  );

-- Policy for adding family members
create policy "Add family members"
  on public.family_members for insert
  to authenticated
  with check (
    exists (
      select 1 from public.families f
      where f.id = family_id
      and f.created_by = auth.uid()
    )
  );

-- Policy for updating family members
create policy "Update family members"
  on public.family_members for update
  to authenticated
  using (
    exists (
      select 1 from public.families f
      where f.id = family_id
      and f.created_by = auth.uid()
    )
  );

-- Policy for deleting family members
create policy "Delete family members"
  on public.family_members for delete
  to authenticated
  using (
    (user_id = (select auth.uid()::text) and is_verified = true)
    or user_id = (
      select email from auth.users
      where id = auth.uid()
    )
    or exists (
      select 1 from public.families f
      where f.id = family_id
      and f.created_by = auth.uid()
    )
  );

-- Chores
alter table public.chores enable row level security;

create policy "Users can view their personal and family chores"
  on public.chores for select
  using (
    auth.uid() = user_id
    or (
      family_id in (
        select family_id from public.family_members
        where user_id = auth.uid()
      )
      and not is_personal
    )
  );

create policy "Users can manage their personal chores"
  on public.chores for all
  using (auth.uid() = user_id);

create policy "Users can manage family chores"
  on public.chores for all
  using (
    family_id in (
      select family_id from public.family_members
      where user_id = auth.uid()
    )
    and not is_personal
  );

-- Grocery Items
alter table public.grocery_items enable row level security;

create policy "Users can view and manage family grocery items"
  on public.grocery_items for all
  using (
    user_id = auth.uid()
    or family_id in (
      select family_id from public.family_members
      where user_id = auth.uid()
    )
  );

-- Expenses
alter table public.expenses enable row level security;

create policy "Users can view their personal and family expenses"
  on public.expenses for select
  using (
    auth.uid() = user_id
    or (
      family_id in (
        select family_id from public.family_members
        where user_id = auth.uid()
      )
      and not is_personal
    )
  );

create policy "Users can manage their personal expenses"
  on public.expenses for all
  using (auth.uid() = user_id);

create policy "Users can manage family expenses"
  on public.expenses for all
  using (
    family_id in (
      select family_id from public.family_members
      where user_id = auth.uid()
    )
    and not is_personal
  );

-- Reminders
alter table public.reminders enable row level security;

create policy "Users can view their personal and family reminders"
  on public.reminders for select
  using (
    auth.uid() = user_id
    or (
      family_id in (
        select family_id from public.family_members
        where user_id = auth.uid()
      )
      and not is_personal
    )
  );

create policy "Users can manage their personal reminders"
  on public.reminders for all
  using (auth.uid() = user_id);

create policy "Users can manage family reminders"
  on public.reminders for all
  using (
    family_id in (
      select family_id from public.family_members
      where user_id = auth.uid()
    )
    and not is_personal
  ); 